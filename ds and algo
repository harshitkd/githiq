# contributiontohacktober

#include<iostream>
#include<algorithm>
#include<stdlib.h>
#include<queue>
using namespace std;

class node{
	public:
	int data;
	node* leftnode=0;
	node* rightnode=0;
};

node* newnode(int data){
	node* root= new node();
	root->data=data;
	root->leftnode=root->rightnode=0;
	return root;
}
node* insert(node*root,int data){
	if(root==0){
		root=newnode(data);
	   }
		else{
		if(root->data>=data){
			root->leftnode=insert(root->leftnode,data);
			}
			else{
				root->rightnode=insert(root->rightnode,data);
	}}
	return root;
}
bool search(node*root,int data){
	if(root==0){
		return false;
	}
	else if(root->data==data){
		return true;
	}
	else if(root->data>=data){
		search(root->leftnode,data);
	}
	else{
		search(root->rightnode,data);
	}
}
int height(node*root){
	if(root==NULL){
		return -1;
	}
	int lheight=height(root->leftnode);
	int rheight=height(root->rightnode);
return max(lheight,rheight)+1;
 
}

int mini(node*root){
	int mi=root->data;
	if(root->leftnode==0)
	return mi;
	else
	mini(root->leftnode);
}
int maxi(node*root){
	int ma=root->data;
	if(root->rightnode==NULL)
	return ma;
	else{
		maxi(root->rightnode);
	}
	
}
void lorder(node*root){
	if(root==NULL)
	return ;
	queue<node*>Q;
	Q.push(root);
	while(!Q.empty()){
		node * current=Q.front();
		cout<<current->data;
		if(current->leftnode!=NULL)
		Q.push(current->leftnode);
		if(current->rightnode!=NULL)
		Q.push(current->rightnode);
	    Q.pop();
	}	
}
 
bool isbst(node*root,int minv,int maxv){
	if(root==NULL)return true;
	if(isbst(root->leftnode,minv,root->data)&&isbst(root->rightnode,root->data,maxv)&&root->data>minv&&root->data<maxv)
	return true;
	else return false;
}
bool isbstt(node*root){
	return isbst(root,mini(root),maxi(root));
}

int main(){
	node* root=NULL;
	int n,z;

	do{
	cout<<"ENTER 1 TO INSERT....2 TO FIND HEIGHT...3 TO FIND MAX VALUE...4 TO FIND MIN VALUE...5 to seacrh..6 TO EXIT\n";
	cin>>n;
	switch(n){
		case 1:int m;
		do{
			cout<<"enter the no. to be entered\n";
			int x;
			cin>>x;
			root=insert(root,x);
		cout<<"enter any no. to enter and 2 to exit\n";
		cin>>m;
		}while(m!=2);
		break;
		case 2:cout<<"height of the tree is:"<<height(root)<<endl;
		break;
		case 3:cout<<"max value of the tree is:"<<maxi(root)<<endl;
		break;
		case 4:cout<<"min value of the tree is:"<<mini(root)<<endl;
	    break;
	    case 5:cout<<"enter thr no to be searched\n";
	    int o;
		if(search(root,o)==true)
		cout<<"found\n";
	    else
	    cout<<"not found\n";
		default: exit;
	}
	cout<<"enter 0 to exit and any no to continue\n";
	cin>>z;
}while(z);

 	lorder(root);
 	cout<<"\n"<<isbstt(root);
	return 0;
}
